{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green129\blue0;\red0\green0\blue255;\red164\green21\blue21;
\red129\green129\blue129;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c50588\c0;\csgenericrgb\c0\c0\c100000;\csgenericrgb\c64314\c8235\c8235;
\csgenericrgb\c50588\c50588\c50588;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs19 \cf2 /*\
Name: Mary Ngwenya\
Input: Prompt the user to enter a password\
Process: Test it for validity and shift each letter to the next.\
Output: Display the results\
This program uses functions with both value and reference parameters.\
EnterPassword prompts the user to enter a password then calls TestPassword\
to make sure that it is a proper password and encrypt each letter by shifting it one\
Output the password if valid and an error message if not\
error messages\
-1 cannot have an invalid character\
-2 cannot start with a digit\
-3 cannot start with two letters being equal\
*/\
\pard\pardeftab720\partightenfactor0
\cf3 #include \cf4 <iostream>\
\cf3 #include \cf4 <string>\
\cf3 #include \cf4 <iomanip>\
\cf3 using namespace \cf0 std;\
\pard\pardeftab720\partightenfactor0
\cf2 // prototypes\
\pard\pardeftab720\partightenfactor0
\cf3 int \cf0 EnterPassword(\cf3 char \cf0 &, \cf3 char \cf0 &, \cf3 char \cf0 &, \cf3 char \cf0 &, \cf3 char \cf0 &);\
\cf3 int \cf0 TestPassword(\cf3 char \cf0 &);\
\cf3 void \cf0 OutputPassword(\cf3 char \cf0 , \cf3 char \cf0 , \cf3 char \cf0 , \cf3 char \cf0 , \cf3 char \cf0 );\
\cf3 int \cf0 main()\
\{\
\pard\pardeftab720\partightenfactor0
\cf2 // declare variables\
\pard\pardeftab720\partightenfactor0
\cf3 char \cf0 c1, c2, c3, c4, c5;\
\cf3 int \cf0 returnValue = 0;\
\cf3 while\cf0 ( returnValue != -4)\
\{\
returnValue = EnterPassword(c1, c2, c3, c4, c5);\
\cf3 switch\cf0 (returnValue)\
\{\
\cf3 case \cf0 -1: cout << \cf4 "You have entered an invalid character" \cf0 << endl; \cf3 break\cf0 ;\
\cf3 case \cf0 -2: cout << \cf4 "Password cannont start with a digit" \cf0 << endl; \cf3 break\cf0 ;\
\cf3 case \cf0 -3: cout << \cf4 "Password cannot start with two of the same character" \cf0 <<\
endl; \cf3 break\cf0 ;\
\cf3 case \cf0 -4: cout << \cf4 "Good-bye" \cf0 << endl; \cf3 break\cf0 ;\
\cf3 default\cf0 : OutputPassword(c1, c2, c3, c4, c5);\
\}\
\}\
\cf3 return \cf0 0;\
\}\
\cf3 int \cf0 EnterPassword(\cf3 char \cf0 & \cf5 c1\cf0 , \cf3 char \cf0 &\cf5 c2\cf0 , \cf3 char \cf0 &\cf5 c3\cf0 , \cf3 char \cf0 &\cf5 c4\cf0 , \cf3 char \cf0 &\cf5 c5\cf0 )\
\{\
cout << \cf4 "Enter a five character password or 'x' to quit: "\cf0 ;\
cin >> \cf5 c1\cf0 ;\
\pard\pardeftab720\partightenfactor0
\cf2 // test first character to see if user wants to exit\
\pard\pardeftab720\partightenfactor0
\cf3 if\cf0 ( \cf5 c1 \cf0 == \cf4 'x'\cf0 )\
\cf3 return \cf0 -4;\
\pard\pardeftab720\partightenfactor0
\cf2 // enter the rest of the characters\
\pard\pardeftab720\partightenfactor0
\cf0 cin >> \cf5 c2 \cf0 >> \cf5 c3 \cf0 >> \cf5 c4 \cf0 >> \cf5 c5\cf0 ;\
\pard\pardeftab720\partightenfactor0
\cf2 // for debugging\
// cout << "You entered: " << c1 << c2 << c3 << c4 << c5 << endl;\
// test each character to see if it is valid\
\pard\pardeftab720\partightenfactor0
\cf3 int \cf0 result;\
result = TestPassword(\cf5 c1\cf0 );\
\cf3 if \cf0 ( result == -1)\
\cf3 return \cf0 -1;\
result = TestPassword(\cf5 c2\cf0 );\
\cf3 if \cf0 ( result == -1)\
\cf3 return \cf0 -1;\
result = TestPassword(\cf5 c3\cf0 );\
\cf3 if \cf0 ( result == -1)\
\cf3 return \cf0 -1;\
result = TestPassword(\cf5 c4\cf0 );\
\cf3 if \cf0 ( result == -1)\
\cf3 return \cf0 -1;\
result = TestPassword(\cf5 c5\cf0 );\
\cf3 if \cf0 ( result == -1)\
\cf3 return \cf0 -1;\
\pard\pardeftab720\partightenfactor0
\cf2 // oassword starts with a digit\
\pard\pardeftab720\partightenfactor0
\cf3 if\cf0 ( \cf5 c1 \cf0 == \cf4 '0'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '1'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '2'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '3'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '4'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '5'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '6'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '7'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '8'\cf0 )\
\cf3 return \cf0 -2;\
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf4 '9'\cf0 )\
\cf3 return \cf0 -2;\
\pard\pardeftab720\partightenfactor0
\cf2 // first two letters are the same\
\pard\pardeftab720\partightenfactor0
\cf3 if\cf0 (\cf5 c1 \cf0 == \cf5 c2\cf0 )\
\cf3 return \cf0 -3;\
\cf3 return \cf0 0;\
\}\
\cf3 int \cf0 TestPassword(\cf3 char \cf0 & \cf5 digit\cf0 )\
\{\
\pard\pardeftab720\partightenfactor0
\cf5 digit \cf0 = toupper(\cf5 digit\cf0 );\
\pard\pardeftab720\partightenfactor0
\cf3 switch \cf0 (\cf5 digit\cf0 )\
\{\
\pard\pardeftab720\partightenfactor0
\cf2 // assign the next digit\
\pard\pardeftab720\partightenfactor0
\cf3 case \cf4 '0'\cf0 : \cf5 digit \cf0 = \cf4 '1'\cf0 ; \cf3 break\cf0 ;\
\cf3 case \cf4 '1'\cf0 : \cf5 digit \cf0 = \cf4 '2'\cf0 ; \cf3 break\cf0 ;\
\cf3 case \cf4 '2'\cf0 : \cf5 digit \cf0 = \cf4 '3'\cf0 ; \cf3 break\cf0 ;\
\cf3 case \cf4 '3'\cf0 : \cf5 digit \cf0 = \cf4 '4'\cf0 ; \cf3 break\cf0 ;\
\cf3 case \cf4 '4'\cf0 : \cf5 digit \cf0 = \cf4 '5'\cf0 ; \cf3 break\cf0 ;\
\cf3 case \cf4 '5'\cf0 : \cf5 digit\cf0 ++; \cf3 break\cf0 ;\
\cf3 case \cf4 '6'\cf0 : \cf5 digit\cf0 ++; \cf3 break\cf0 ;\
\cf3 case \cf4 '7'\cf0 : \cf5 digit\cf0 ++; \cf3 break\cf0 ;\
\cf3 case \cf4 '8'\cf0 : \cf5 digit\cf0 ++; \cf3 break\cf0 ;\
\pard\pardeftab720\partightenfactor0
\cf2 // at the end so assign the first digit\
\pard\pardeftab720\partightenfactor0
\cf3 case \cf4 '9'\cf0 : \cf5 digit \cf0 = \cf4 '0'\cf0 ; \cf3 break\cf0 ;\
\pard\pardeftab720\partightenfactor0
\cf2 // assign the next letter\
\pard\pardeftab720\partightenfactor0
\cf3 case \cf4 'A'\cf0 : \cf5 digit \cf0 = \cf4 'B'\cf0 ; \cf3 break\cf0 ;\
\cf3 case \cf4 'B'\cf0 : \cf5 digit \cf0 = \cf4 'C'\cf0 ; \cf3 break\cf0 ;\
\cf3 case \cf4 'C'\cf0 : \cf5 digit \cf0 = \cf4 'D'\cf0 ; \cf3 break\cf0 ;\
\cf3 case \cf4 'D'\cf0 : \cf5 digit \cf0 = \cf4 'E'\cf0 ; \cf3 break\cf0 ;\
\pard\pardeftab720\partightenfactor0
\cf2 // do the same thing for the next five letters\
// assign the next letter\
\pard\pardeftab720\partightenfactor0
\cf3 case \cf4 'E'\cf0 :\
\cf3 case \cf4 'F'\cf0 :\
\cf3 case \cf4 'G'\cf0 :\
\cf3 case \cf4 'H'\cf0 :\
\cf3 case \cf4 'I'\cf0 : \cf5 digit\cf0 ++; \cf3 break\cf0 ;\
\pard\pardeftab720\partightenfactor0
\cf2 // do the same thing for the next seven letters\
// assgin the next letter\
\pard\pardeftab720\partightenfactor0
\cf3 case \cf4 'J'\cf0 :\
\cf3 case \cf4 'K'\cf0 :\
\cf3 case \cf4 'L'\cf0 :\
\cf3 case \cf4 'M'\cf0 :\
\cf3 case \cf4 'N'\cf0 :\
\cf3 case \cf4 'O'\cf0 :\
\cf3 case \cf4 'P'\cf0 : \cf5 digit\cf0 ++; \cf3 break\cf0 ;\
\cf3 case \cf4 'Q'\cf0 :\
\cf3 case \cf4 'R'\cf0 :\
\cf3 case \cf4 'S'\cf0 :\
\cf3 case \cf4 'T'\cf0 :\
\cf3 case \cf4 'U'\cf0 :\
\cf3 case \cf4 'V'\cf0 :\
\cf3 case \cf4 'W'\cf0 :\
\cf3 case \cf4 'X'\cf0 :\
\cf3 case \cf4 'Y'\cf0 : \cf5 digit\cf0 ++; \cf3 break\cf0 ;\
\pard\pardeftab720\partightenfactor0
\cf2 // at the end, assign the first letter\
\pard\pardeftab720\partightenfactor0
\cf3 case \cf4 'Z'\cf0 : \cf5 digit \cf0 = \cf4 'A'\cf0 ; \cf3 break\cf0 ;\
\pard\pardeftab720\partightenfactor0
\cf2 // the character was not a letter or digit\
// return -1 to indicate an error\
\pard\pardeftab720\partightenfactor0
\cf3 default\cf0 : \cf3 return \cf0 -1; \cf2 // break;\
\pard\pardeftab720\partightenfactor0
\cf0 \}\
\pard\pardeftab720\partightenfactor0
\cf2 // return 0 to indicate a valid digit\
\pard\pardeftab720\partightenfactor0
\cf3 return \cf0 0;\
\}\
\cf3 void \cf0 OutputPassword(\cf3 char \cf5 c1\cf0 , \cf3 char \cf5 c2\cf0 , \cf3 char \cf5 c3\cf0 , \cf3 char \cf5 c4\cf0 , \cf3 char \cf5 c5\cf0 )\
\{\
cout << \cf4 "the encrypted password is: " \cf0 << \cf5 c1 \cf0 << \cf5 c2 \cf0 << \cf5 c3 \cf0 << \cf5 c4 \cf0 << \cf5 c5 \cf0 << endl;\
\}}
